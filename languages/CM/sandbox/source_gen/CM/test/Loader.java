package CM.test;

/*Generated by MPS */

import java.util.List;
import java.util.ArrayList;
import org.lwjgl.opengl.GL30;
import org.lwjgl.opengl.GL15;
import java.nio.FloatBuffer;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL11;
import org.lwjgl.BufferUtils;
import java.nio.IntBuffer;
import org.newdawn.slick.opengl.Texture;
import java.io.FileInputStream;
import org.newdawn.slick.opengl.TextureLoader;
import java.io.IOException;

public class Loader {

  private List<Integer> textures = new ArrayList<Integer>();
  private List<Integer> vbos = new ArrayList<Integer>();
  private List<Integer> vaos = new ArrayList<Integer>();



  private int createVAO() {
    int vaoID = GL30.glGenVertexArrays();
    vaos.add(vaoID);
    GL30.glBindVertexArray(vaoID);
    return vaoID;
  }

  public RawModel loadtoVAO(float[] pos, int[] indices, float[] texCoords) {
    int vaoID = createVAO();
    bindIndicesBuffer(indices);
    storeDataInAttributeList(0, pos, 3);
    storeDataInAttributeList(0, texCoords, 2);

    unbindVAO();
    return new RawModel(vaoID, indices.length);
  }

  private void storeDataInAttributeList(int attributeNumber, float[] data, int coordSize) {
    int vboID = GL15.glGenBuffers();
    vbos.add(vboID);
    GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vboID);
    FloatBuffer buffer = storeDataInFloatBuffer(data);
    GL15.glBufferData(GL15.GL_ARRAY_BUFFER, buffer, GL15.GL_STATIC_DRAW);
    GL20.glVertexAttribPointer(attributeNumber, coordSize, GL11.GL_FLOAT, false, 0, 0);
    GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
  }


  private void unbindVAO() {
    GL30.glBindVertexArray(0);
  }

  private FloatBuffer storeDataInFloatBuffer(float[] data) {
    FloatBuffer buffer = BufferUtils.createFloatBuffer(data.length);
    buffer.put(data);
    buffer.flip();
    return buffer;
  }

  public void cleanUp() {
    for (int vao : vaos) {
      GL30.glDeleteVertexArrays(vao);
    }
    for (int vbo : vbos) {
      GL15.glDeleteBuffers(vbo);
    }
    for (int t : textures) {
      GL11.glDeleteTextures(t);
    }
  }

  private void bindIndicesBuffer(int[] indices) {
    int vboID = GL15.glGenBuffers();
    vbos.add(vboID);
    GL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, vboID);
    IntBuffer buffer = storeDataIntBuffer(indices);
    GL15.glBufferData(GL15.GL_ELEMENT_ARRAY_BUFFER, buffer, GL15.GL_STATIC_DRAW);
  }

  private IntBuffer storeDataIntBuffer(int[] data) {
    IntBuffer buffer = BufferUtils.createIntBuffer(data.length);
    buffer.put(data);
    buffer.flip();
    return buffer;
  }

  public int loadTex(String file) {
    Texture tex = null;
    try {
      FileInputStream f = new FileInputStream("textures/" + file + ".png");
      tex = TextureLoader.getTexture("PNG", f);
    } catch (IOException e) {
      e.printStackTrace();
    }
    int texId = tex.getTextureID();
    textures.add(texId);
    return texId;
  }

}
