package CM.test;

/*Generated by MPS */

import java.nio.FloatBuffer;
import org.lwjgl.BufferUtils;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Matrix4f;

public abstract class ShaderProgram {

  private static FloatBuffer mBuffer = BufferUtils.createFloatBuffer(16);
  private int programId;
  private int fragmentShaderId;
  private int vertexShaderId;

  private static int loadShader(String f, int t) {
    StringBuilder s = new StringBuilder();
    try {
      BufferedReader r = new BufferedReader(new FileReader(f));
      String line;
      while ((line = r.readLine()) != null) {
        s.append(line).append("//\n");
      }
      r.close();
    } catch (IOException er) {
      er.printStackTrace();
      System.exit(1);
    }
    int shaderId = GL20.glCreateShader(t);
    GL20.glShaderSource(shaderId, s);
    GL20.glCompileShader(shaderId);
    if (GL20.glGetShaderi(shaderId, GL20.GL_COMPILE_STATUS) == GL11.GL_FALSE) {
      System.exit(-1);
    }
    return shaderId;
  }

  public ShaderProgram(String vFile, String fFile) {
    vertexShaderId = loadShader(vFile, GL20.GL_VERTEX_SHADER);
    fragmentShaderId = loadShader(fFile, GL20.GL_FRAGMENT_SHADER);
    programId = GL20.glCreateProgram();
    GL20.glAttachShader(programId, vertexShaderId);
    GL20.glAttachShader(programId, fragmentShaderId);
    bindAttribs();
    GL20.glLinkProgram(programId);
    GL20.glValidateProgram(programId);
    getAllUniformLocations();
  }

  public void start() {
    GL20.glUseProgram(programId);
  }

  public void stop() {
    GL20.glUseProgram(0);
  }

  public void clean() {
    stop();
    GL20.glDetachShader(programId, vertexShaderId);
    GL20.glDetachShader(programId, fragmentShaderId);
    GL20.glDeleteShader(vertexShaderId);
    GL20.glDeleteShader(fragmentShaderId);
    GL20.glDeleteProgram(programId);
  }

  protected void bindAttrib(int attrib, String var) {
    GL20.glBindAttribLocation(programId, attrib, var);
  }

  protected abstract void bindAttribs();

  protected int getUniformLocation(String uniName) {
    return GL20.glGetUniformLocation(programId, uniName);
  }

  protected abstract void getAllUniformLocations();

  protected void loadVector(int loc, Vector3f v) {
    GL20.glUniform3f(loc, v.x, v.y, v.z);
  }

  protected void loadBoolean(int loc, boolean b) {
    float temp = 0;
    if (b) {
      temp = 1;
    }
    GL20.glUniform1f(loc, temp);
  }

  protected void loadFloat(int loc, float v) {
    GL20.glUniform1f(loc, v);
  }

  protected void loadMatrix(int loc, Matrix4f m) {
    m.store(mBuffer);
    mBuffer.flip();
    GL20.glUniformMatrix4(loc, false, mBuffer);
  }
}
