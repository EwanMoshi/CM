package CM.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptCake = new ConceptDescriptorBuilder("CM.structure.Cake", MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d90eL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(3943146117781707054L, "tiers", MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d930L), true, true, false)).children(new String[]{"tiers"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptCircle = new ConceptDescriptorBuilder("CM.structure.Circle", MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d968L)).super_("CM.structure.Shape").super_(MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d94cL)).parents("CM.structure.Shape").parentIds(MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d94cL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(3943146117781707140L, "size")).properties("size").alias("circle", "").create();
  /*package*/ final ConceptDescriptor myConceptShape = new ConceptDescriptorBuilder("CM.structure.Shape", MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d94cL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptSquare = new ConceptDescriptorBuilder("CM.structure.Square", MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d986L)).super_("CM.structure.Shape").super_(MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d94cL)).parents("CM.structure.Shape").parentIds(MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d94cL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(3943146117781707170L, "size")).properties("size").alias("square", "").create();
  /*package*/ final ConceptDescriptor myConceptTier = new ConceptDescriptorBuilder("CM.structure.Tier", MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d930L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(3943146117781707184L, "shape", MetaIdFactory.conceptId(0x302ba9749330456cL, 0x8ab141e68cf0c655L, 0x36b8de809fd6d94cL), false, false, false)).children(new String[]{"shape"}, new boolean[]{false}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCake, myConceptCircle, myConceptShape, myConceptSquare, myConceptTier);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0j, conceptFqName)) {
      case 0:
        return myConceptCake;
      case 1:
        return myConceptCircle;
      case 2:
        return myConceptShape;
      case 3:
        return myConceptSquare;
      case 4:
        return myConceptTier;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0j = new String[]{"CM.structure.Cake", "CM.structure.Circle", "CM.structure.Shape", "CM.structure.Square", "CM.structure.Tier"};
}
